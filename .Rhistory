gee.pois <- gee(y ~ x1 + x2, id = 1:n, family = poisson(link = "log"), silent = TRUE)
sum.gee.pois <- summary(gee.pois)
coef.gee.pois <- sum.gee.pois$coefficients[,"Estimate"]
se.gee.pois <- sum.gee.pois$coefficients[, "Robust S.E."]
ci.f <- lapply(1:3, function(param) {
coef.gee.pois[param] + c(-1,1)*1.96*se.gee.pois[param]
})
for (param in 1:3) {
true_beta_param <- true_beta[param] # the current true beta
# Checking model (a)
contained.a <- (true_beta_param >= ci.a[[param]][1]) & (true_beta_param <= ci.a[[param]][2])
Coverage.By.Model$pois.sandwich[[param]] = Coverage.By.Model$pois.sandwich[[param]] + contained.a
# Checking model (b)
contained.b <- (true_beta_param >= ci.b[[param]][1]) & (true_beta_param <= ci.b[[param]][2])
Coverage.By.Model$pois.quasi[[param]] = Coverage.By.Model$pois.quasi[[param]] + contained.b
# Checking model (c)
contained.c <- (true_beta_param >= ci.c[[param]][1]) & (true_beta_param <= ci.c[[param]][2])
Coverage.By.Model$pois.glm[[param]] = Coverage.By.Model$pois.glm[[param]] + contained.c
# Checking model (e)
contained.e <- (true_beta_param >= ci.e[[param]][1]) & (true_beta_param <= ci.e[[param]][2])
Coverage.By.Model$nb.glm[[param]] = Coverage.By.Model$nb.glm[[param]] + contained.e
# Checking model (f)
contained.f <- (true_beta_param >= ci.f[[param]][1]) & (true_beta_param <= ci.f[[param]][2])
Coverage.By.Model$pois.gee[[param]] = Coverage.By.Model$pois.gee[[param]] + contained.f
}
Coverage.By.Model
for (i in 1:100) {
set.seed(i)
# Simulating the dataset
n <- 200 # sample size
true_beta <- c(2, 1, 0.5) # the true beta vector
x1 <- rnorm (n, mean = 0, sd = 1) # first covariate
x2 <- rep (0:1, each = n/2) # second covariate
mu <- exp (2 + 1 * x1 + 0.5 * x2)
alpha <- 0.5
gamma <- 1 / alpha
nu <- rgamma(n, shape = gamma, scale = 1)
y <- rpois(n, lambda = mu * nu / gamma)
# Model (a)
# Pois GLM with sandwich variance estimators
glm.for.quasi <- glm(y ~ x1 + x2, family = quasi(link=log, variance="mu")) # quasi estimators
X <- cbind(1, x1, x2)
betahat <- matrix(glm.for.quasi$coefficients, nrow = 3)
muhat <- exp(X %*% betahat)
p <- 3 # the number of predictors
alphahat <- (1/(n-p)) * sum(((y-muhat)^2-muhat)/(muhat^2))
A.a <- 0
B.a <- 0
for (i in 1:n) {
A.a <- A.a + (X[i,] %*% t(X[i,])) * muhat[i]
B.a <- B.a + (X[i,] %*% t(X[i,])) * (muhat[i] + alphahat * muhat[i]^2)
}
A.a <- (1/n) * A.a
B.a <- (1/n) * B.a
# Combining A and B together
Var.a <- solve(A.a) %*% B.a %*% solve(A.a)
# Then the SEs are:
se.a <- sqrt(c(Var.a[1,1],
Var.a[2,2],
Var.a[3,3]))
ci.a <- lapply(1:3, function(param) {
glm.for.quasi$coefficients[param] + c(-1,1)*1.96*se.a[param]
})
# Model (b)
# Quasi-likelihood model
quasi.sum <- summary(glm.for.quasi)
coef.pois.quais <- quasi.sum$coefficients[, "Estimate"]
se.pois.quasi <- quasi.sum$coefficients[, "Std. Error"]
## Computing the confidence interval
ci.b <- lapply(1:3, function(param) {
coef.pois.quais[param] + c(-1,1)*1.96*se.pois.quasi[param]
})
# Model (c)
# Ordinary Poisson log-link regression
pois.glm <- glm(y ~ x1 + x2, family = poisson(link = "log"))
sum.pois.glm <- summary(pois.glm)
coef.pois.glm <- sum.pois.glm$coefficients[, "Estimate"]
se.pois.glm <- sum.pois.glm$coefficients[, "Std. Error"]
## Computing the confidence interval
ci.c <- lapply(1:3, function(param) {
coef.pois.glm[param] + c(-1,1)*1.96*se.pois.glm[param]
})
# Model (e)
# Negative-Binomial regression with log-link
nb.glm <- glm.nb(y ~ x1 + x2)
sum.nb.glm <- summary(nb.glm)
coef.nb.glm <- sum.nb.glm$coefficients[,"Estimate"]
se.nb.glm <- sum.nb.glm$coefficients[,"Std. Error"]
## Computing the confidence interval
ci.e <- lapply(1:3, function(param) {
coef.nb.glm[param] + c(-1,1)*1.96*se.nb.glm[param]
})
# Model (f)
gee.pois <- gee(y ~ x1 + x2, id = 1:n, family = poisson(link = "log"), silent = TRUE)
sum.gee.pois <- summary(gee.pois)
coef.gee.pois <- sum.gee.pois$coefficients[,"Estimate"]
se.gee.pois <- sum.gee.pois$coefficients[, "Robust S.E."]
## Computing the confidence interval
ci.f <- lapply(1:3, function(param) {
coef.gee.pois[param] + c(-1,1)*1.96*se.gee.pois[param]
})
# Checking if the true values are contained in any of the above intervals
for (param in 1:3) {
true_beta_param <- true_beta[param] # the current true beta
# Checking model (a)
contained.a <- (true_beta_param >= ci.a[[param]][1]) & (true_beta_param <= ci.a[[param]][2])
Coverage.By.Model$pois.sandwich[[param]] = Coverage.By.Model$pois.sandwich[[param]] + contained.a
# Checking model (b)
contained.b <- (true_beta_param >= ci.b[[param]][1]) & (true_beta_param <= ci.b[[param]][2])
Coverage.By.Model$pois.quasi[[param]] = Coverage.By.Model$pois.quasi[[param]] + contained.b
# Checking model (c)
contained.c <- (true_beta_param >= ci.c[[param]][1]) & (true_beta_param <= ci.c[[param]][2])
Coverage.By.Model$pois.glm[[param]] = Coverage.By.Model$pois.glm[[param]] + contained.c
# Checking model (e)
contained.e <- (true_beta_param >= ci.e[[param]][1]) & (true_beta_param <= ci.e[[param]][2])
Coverage.By.Model$nb.glm[[param]] = Coverage.By.Model$nb.glm[[param]] + contained.e
# Checking model (f)
contained.f <- (true_beta_param >= ci.f[[param]][1]) & (true_beta_param <= ci.f[[param]][2])
Coverage.By.Model$pois.gee[[param]] = Coverage.By.Model$pois.gee[[param]] + contained.f
}
}
Coverage.Rate.By.Model <- lapply(Coverage.By.Model, function(mod) {
lapply(mod, function(param) param/100)
})
Coverage.Rate.By.Model
Coverage.By.Model <- list(pois.sandwich = list(intercept = 0,
beta1 = 0,
beta2 = 0),
pois.quasi = list(intercept = 0,
beta1 = 0,
beta2 = 0),
pois.glm = list(intercept = 0,
beta1 = 0,
beta2 = 0),
nb.glm = list(intercept = 0,
beta1 = 0,
beta2 = 0),
pois.gee = list(intercept = 0,
beta1 = 0,
beta2 = 0))
for (i in 1:100) {
set.seed(i)
# Simulating the dataset
n <- 200 # sample size
true_beta <- c(2, 1, 0.5) # the true beta vector
x1 <- rnorm (n, mean = 0, sd = 1) # first covariate
x2 <- rep (0:1, each = n/2) # second covariate
mu <- exp (2 + 1 * x1 + 0.5 * x2)
alpha <- 0.5
gamma <- 1 / alpha
nu <- rgamma(n, shape = gamma, scale = 1)
y <- rpois(n, lambda = mu * nu / gamma)
# Model (a)
# Pois GLM with sandwich variance estimators
glm.for.quasi <- glm(y ~ x1 + x2, family = quasi(link=log, variance="mu")) # quasi estimators
X <- cbind(1, x1, x2)
betahat <- matrix(glm.for.quasi$coefficients, nrow = 3)
muhat <- exp(X %*% betahat)
p <- 3 # the number of predictors
alphahat <- (1/(n-p)) * sum(((y-muhat)^2-muhat)/(muhat^2))
A.a <- 0
B.a <- 0
for (i in 1:n) {
A.a <- A.a + (X[i,] %*% t(X[i,])) * muhat[i]
B.a <- B.a + (X[i,] %*% t(X[i,])) * (muhat[i] + alphahat * muhat[i]^2)
}
A.a <- (1/n) * A.a
B.a <- (1/n) * B.a
# Combining A and B together
Var.a <- solve(A.a) %*% B.a %*% solve(A.a)
# Then the SEs are:
se.a <- sqrt(c(Var.a[1,1],
Var.a[2,2],
Var.a[3,3]))
ci.a <- lapply(1:3, function(param) {
glm.for.quasi$coefficients[param] + c(-1,1)*1.96*se.a[param]
})
# Model (b)
# Quasi-likelihood model
quasi.sum <- summary(glm.for.quasi)
coef.pois.quais <- quasi.sum$coefficients[, "Estimate"]
se.pois.quasi <- quasi.sum$coefficients[, "Std. Error"]
## Computing the confidence interval
ci.b <- lapply(1:3, function(param) {
coef.pois.quais[param] + c(-1,1)*1.96*se.pois.quasi[param]
})
# Model (c)
# Ordinary Poisson log-link regression
pois.glm <- glm(y ~ x1 + x2, family = poisson(link = "log"))
sum.pois.glm <- summary(pois.glm)
coef.pois.glm <- sum.pois.glm$coefficients[, "Estimate"]
se.pois.glm <- sum.pois.glm$coefficients[, "Std. Error"]
## Computing the confidence interval
ci.c <- lapply(1:3, function(param) {
coef.pois.glm[param] + c(-1,1)*1.96*se.pois.glm[param]
})
# Model (e)
# Negative-Binomial regression with log-link
nb.glm <- glm.nb(y ~ x1 + x2)
sum.nb.glm <- summary(nb.glm)
coef.nb.glm <- sum.nb.glm$coefficients[,"Estimate"]
se.nb.glm <- sum.nb.glm$coefficients[,"Std. Error"]
## Computing the confidence interval
ci.e <- lapply(1:3, function(param) {
coef.nb.glm[param] + c(-1,1)*1.96*se.nb.glm[param]
})
# Model (f)
gee.pois <- gee(y ~ x1 + x2, id = 1:n, family = poisson(link = "log"), silent = TRUE)
sum.gee.pois <- summary(gee.pois)
coef.gee.pois <- sum.gee.pois$coefficients[,"Estimate"]
se.gee.pois <- sum.gee.pois$coefficients[, "Robust S.E."]
## Computing the confidence interval
ci.f <- lapply(1:3, function(param) {
coef.gee.pois[param] + c(-1,1)*1.96*se.gee.pois[param]
})
# Checking if the true values are contained in any of the above intervals
for (param in 1:3) {
true_beta_param <- true_beta[param] # the current true beta
# Checking model (a)
contained.a <- (true_beta_param >= ci.a[[param]][1]) & (true_beta_param <= ci.a[[param]][2])
Coverage.By.Model$pois.sandwich[[param]] = Coverage.By.Model$pois.sandwich[[param]] + contained.a
# Checking model (b)
contained.b <- (true_beta_param >= ci.b[[param]][1]) & (true_beta_param <= ci.b[[param]][2])
Coverage.By.Model$pois.quasi[[param]] = Coverage.By.Model$pois.quasi[[param]] + contained.b
# Checking model (c)
contained.c <- (true_beta_param >= ci.c[[param]][1]) & (true_beta_param <= ci.c[[param]][2])
Coverage.By.Model$pois.glm[[param]] = Coverage.By.Model$pois.glm[[param]] + contained.c
# Checking model (e)
contained.e <- (true_beta_param >= ci.e[[param]][1]) & (true_beta_param <= ci.e[[param]][2])
Coverage.By.Model$nb.glm[[param]] = Coverage.By.Model$nb.glm[[param]] + contained.e
# Checking model (f)
contained.f <- (true_beta_param >= ci.f[[param]][1]) & (true_beta_param <= ci.f[[param]][2])
Coverage.By.Model$pois.gee[[param]] = Coverage.By.Model$pois.gee[[param]] + contained.f
}
}
Coverage.Rate.By.Model <- lapply(Coverage.By.Model, function(mod) {
lapply(mod, function(param) param/100)
})
Coverage.Rate.By.Model
sim.results <- matrix(nrow = 5, ncol = 3)
colnames(sim.results) <- c("Intercept", "Beta1", "Beta2")
rownames(sim.results) <- c("Quasi Sandwich", "Poisson GLM", "Poisson Quasi" , "NB GLM", "Poisson GEE")
row <- 1
inds <- c(1, 4, 7, 10)
sim.results
unlist(Coverage.Rate.By.Model)
row <- 1
inds <- c(1, 4, 7, 10, 13)
for (i in inds) {
sim.results[row,] <- unlist(Coverage.Rate.By.Model)[c(i, i+1:2)]
row <- row + 1
}
sim.results
xtable(sim.results)
source("/Users/sarahsamorodnitsky/Documents/PanCancerOmics/HierarchicalSS_PanCanPanOmics/ExtendedHierarchicalModelSpikeAndSlabCoverageSimulation.R"); source("/Users/sarahsamorodnitsky/Documents/PanCancerOmics/HierarchicalSS_PanCanPanOmics/ExtendedHierarchicalModelSpikeAndSlabSelectingTrueParametersSimulation.R")
?source
setwd("/Users/sarahsamorodnitsky/Documents/PanCancerOmics/HierarchicalSS_PanCanPanOmics/")
source("/Users/sarahsamorodnitsky/Documents/PanCancerOmics/HierarchicalSS_PanCanPanOmics/ExtendedHierarchicalModelSpikeAndSlabCoverageSimulation.R")
# Code just to run checker simulations.
setwd("/Users/sarahsamorodnitsky/Documents/PanCancerOmics/HierarchicalSS_PanCanPanOmics/")
source("/Users/sarahsamorodnitsky/Documents/PanCancerOmics/HierarchicalSS_PanCanPanOmics/ExtendedHierarchicalModelSpikeAndSlabCoverageSimulation.R")
source("/Users/sarahsamorodnitsky/Documents/PanCancerOmics/HierarchicalSS_PanCanPanOmics/ExtendedHierarchicalModelSpikeAndSlabSelectingTrueParametersSimulation.R")
Test
testsel$SelPerc
testsel1 <- testsel
Test1 <- Test
save(testsel, file = "SelectionAccuracySimulationResults.rda")
setwd("~/Documents/PanCancerOmics/HierarchicalSS_PanCanPanOmics")
save(Test, file = "CoverageSimulationResult.rda")
save(testsel, file = "SelectionAccuracySimulationResults.rda")
covariates_by_cancer = list(c(1, 2, 4), c(1, 2, 3, 4), c(1, 3), c(1, 2, 3), c(1, 4), c(1, 2, 4),
c(1, 3), c(1, 2), c(1, 2, 3), c(1, 2, 3, 4), c(1, 2), c(1, 3))
BetaNames <- lapply(1:length(covariates_by_cancer), function(cancer) {
paste("Beta", cancer, covariates_by_cancer[[cancer]]-1, sep = "")
})
names(Test) <- c("BetaTilde0", "BetaTilde1", "BetaTilde2", "BetaTilde3",
"sigma20", "lambda20", "lambda21", "lambda22", "lambda23",
unlist(BetaNames), "pi0", "pi1", "pi2", "pi3")
Test
length(Test)
CovariateParams <- Test[c("BetaTilde0", "BetaTilde1", "BetaTilde2", "BetaTilde3",
"lambda20", "lambda21", "lambda22", "lambda23",
"pi0", "pi1", "pi2", "pi3")]
ModelClusterParams <- Test[c(unlist(BetaNames))]
covariates_by_cancer_augmented <- lapply(1:length(covariates_by_cancer), function(cancer) c(1:4))
ModelClusterParamsAugmented <- lapply(1:length(covariates_by_cancer_augmented), function(cancer) {
paste("Beta", cancer, covariates_by_cancer_augmented[[cancer]]-1, sep = "")
})
CoverageResults <- matrix(ncol = 4, nrow = (1+1+1+length(covariates_by_cancer)))
colnames(CoverageResults) <- c("Intercept", paste("Covariate", 1:3))
rownames(CoverageResults) <- c("\tilde\beta", "\ lambda^2", "\ pi", paste("beta_{", 1:12, ".}", sep = ""))
CoverageResults[1,] <- Test[c("BetaTilde0", "BetaTilde1", "BetaTilde2", "BetaTilde3")]
CoverageResults[2,] <- Test[c("lambda20", "lambda21", "lambda22", "lambda23")]
CoverageResults[3,] <- Test[c("pi0", "pi1", "pi2", "pi3")]
for (i in 1:12) {
Covariates.i <- covariates_by_cancer[[i]]
BetasAvail.i <- BetaNames[[i]]
Test.i <- Test[c(BetasAvail.i)]
# Filling in the beta that may not be present
if (any(!(c(1:4) %in% Covariates.i))) { # if any betas are missing
BetaToAdd.i <- c(1:4)[!(c(1:4) %in% Covariates.i)]
NewBetasVec.i <- rep(NA, 4)
NamesNewBetasVec.i <- rep(NA, 4)
NewBetasVec.i[Covariates.i] <- Test.i
NamesNewBetasVec.i[Covariates.i] <- BetasAvail.i
NamesNewBetasVec.i[BetaToAdd.i] <- paste("Beta", i, BetaToAdd.i, sep = "")
names(NewBetasVec.i) <- NamesNewBetasVec.i
} else {
NewBetasVec.i <- Test.i
}
CoverageResults[i+3,] <- NewBetasVec.i
}
CoverageResults
library(xtable)
xtable(CoverageResults)
CoverageResults
xtable(CoverageResults, digits = 4)
xtable(CoverageResults, digits = 3)
SelPerc <- testsel$SelPerc
names(SelPerc) <- unlist(BetaNames)
SelectionAccuracy <- matrix(ncol = 3, nrow = 12)
colnames(SelectionAccuracy) <- c("Covariate 1", "Covariate 2", "Covariate 3")
rownames(SelectionAccuracy) <- paste("$\\beta_{", 1:12, ".}$", sep = "")
SelPercNoIntercept <- SelPerc[SelPerc != 1]
for (i in 1:12) {
Params.i <- paste("Beta", i, covariates_by_cancer[[i]]-1, sep = "")[-1] # to get rid of the intercept
Results.i <- SelPercNoIntercept[c(Params.i)]
# Filling in NAs where betas did not exist
NewResults.i <- rep(NA, 3)
Covariates.i.NoIntercept <- covariates_by_cancer[[i]][-1]-1
NewResults.i[c(1:3) %in% Covariates.i.NoIntercept] <- Results.i
# Filling in the table
SelectionAccuracy[i,] <- NewResults.i
}
SelectionAccuracy
print(xtable(SelectionAccuracy,
type = "latex",
digits = 3,
sanitize.rownames.function=function(x){x}))
exp(0.1479)
exp(-0.2999)
exp(-0.0018)
exp(-0.0747)
exp(-0.0756)
exp(0.9811)
exp(0.9213)
exp(1.4666)
exp(1.2615)
exp(0.8012)
n <- 200 # sample size
true_beta <- c(2, 1, 0.5) # the true beta vector
x1 <- rnorm (n, mean = 0, sd = 1) # first covariate
x2 <- rep (0:1, each = n/2) # second covariate
mu <- exp (2 + 1 * x1 + 0.5 * x2)
alpha <- 0.5
gamma <- 1 / alpha
nu <- rgamma(n, shape = gamma, scale = 1)
y <- rpois(n, lambda = mu * nu / gamma)
glm.for.quasi <- glm(y ~ x1 + x2, family = quasi(link=log, variance="mu")) # quasi estimators
X <- cbind(1, x1, x2)
betahat <- matrix(glm.for.quasi$coefficients, nrow = 3)
muhat <- exp(X %*% betahat)
p <- 3 # the number of predictors
alphahat <- (1/(n-p)) * sum(((y-muhat)^2-muhat)/(muhat^2))
alphahat
A.a <- 0
B.a <- 0
for (i in 1:n) {
A.a <- A.a + (X[i,] %*% t(X[i,])) * muhat[i]
B.a <- B.a + (X[i,] %*% t(X[i,])) * (muhat[i] + alphahat * muhat[i]^2)
}
A.a <- (1/n) * A.a
B.a <- (1/n) * B.a
Var.a <- solve(A.a) %*% B.a %*% solve(A.a)
se.a <- sqrt(c(Var.a[1,1],
Var.a[2,2],
Var.a[3,3]))
ci.a <- lapply(1:3, function(param) {
glm.for.quasi$coefficients[param] + c(-1,1)*1.96*se.a[param]
})
ci.a
Coverage.By.Model <- list(pois.sandwich = list(intercept = 0,
beta1 = 0,
beta2 = 0),
pois.quasi = list(intercept = 0,
beta1 = 0,
beta2 = 0),
pois.glm = list(intercept = 0,
beta1 = 0,
beta2 = 0),
nb.glm = list(intercept = 0,
beta1 = 0,
beta2 = 0),
pois.gee = list(intercept = 0,
beta1 = 0,
beta2 = 0))
for (i in 1:100) {
set.seed(i)
# Simulating the dataset
n <- 200 # sample size
true_beta <- c(2, 1, 0.5) # the true beta vector
x1 <- rnorm (n, mean = 0, sd = 1) # first covariate
x2 <- rep (0:1, each = n/2) # second covariate
mu <- exp (2 + 1 * x1 + 0.5 * x2)
alpha <- 0.5
gamma <- 1 / alpha
nu <- rgamma(n, shape = gamma, scale = 1)
y <- rpois(n, lambda = mu * nu / gamma)
# Model (a)
# Pois GLM with sandwich variance estimators
glm.for.quasi <- glm(y ~ x1 + x2, family = quasi(link=log, variance="mu")) # quasi estimators
X <- cbind(1, x1, x2)
betahat <- matrix(glm.for.quasi$coefficients, nrow = 3)
muhat <- exp(X %*% betahat)
p <- 3 # the number of predictors
alphahat <- (1/(n-p)) * sum(((y-muhat)^2-muhat)/(muhat^2))
A.a <- 0
B.a <- 0
for (i in 1:n) {
A.a <- A.a + (X[i,] %*% t(X[i,])) * muhat[i]
B.a <- B.a + (X[i,] %*% t(X[i,])) * (muhat[i] + alphahat * muhat[i]^2)
}
A.a <- (1/n) * A.a
B.a <- (1/n) * B.a
# Combining A and B together
Var.a <- solve(A.a) %*% B.a %*% solve(A.a)
# Then the SEs are:
se.a <- sqrt(c(Var.a[1,1],
Var.a[2,2],
Var.a[3,3]))
ci.a <- lapply(1:3, function(param) {
glm.for.quasi$coefficients[param] + c(-1,1)*1.96*se.a[param]
})
# Model (b)
# Quasi-likelihood model
quasi.sum <- summary(glm.for.quasi)
coef.pois.quais <- quasi.sum$coefficients[, "Estimate"]
se.pois.quasi <- quasi.sum$coefficients[, "Std. Error"]
## Computing the confidence interval
ci.b <- lapply(1:3, function(param) {
coef.pois.quais[param] + c(-1,1)*1.96*se.pois.quasi[param]
})
# Model (c)
# Ordinary Poisson log-link regression
pois.glm <- glm(y ~ x1 + x2, family = poisson(link = "log"))
sum.pois.glm <- summary(pois.glm)
coef.pois.glm <- sum.pois.glm$coefficients[, "Estimate"]
se.pois.glm <- sum.pois.glm$coefficients[, "Std. Error"]
## Computing the confidence interval
ci.c <- lapply(1:3, function(param) {
coef.pois.glm[param] + c(-1,1)*1.96*se.pois.glm[param]
})
# Model (e)
# Negative-Binomial regression with log-link
nb.glm <- glm.nb(y ~ x1 + x2)
sum.nb.glm <- summary(nb.glm)
coef.nb.glm <- sum.nb.glm$coefficients[,"Estimate"]
se.nb.glm <- sum.nb.glm$coefficients[,"Std. Error"]
## Computing the confidence interval
ci.e <- lapply(1:3, function(param) {
coef.nb.glm[param] + c(-1,1)*1.96*se.nb.glm[param]
})
# Model (f)
gee.pois <- gee(y ~ x1 + x2, id = 1:n, family = poisson(link = "log"), silent = TRUE)
sum.gee.pois <- summary(gee.pois)
coef.gee.pois <- sum.gee.pois$coefficients[,"Estimate"]
se.gee.pois <- sum.gee.pois$coefficients[, "Robust S.E."]
## Computing the confidence interval
ci.f <- lapply(1:3, function(param) {
coef.gee.pois[param] + c(-1,1)*1.96*se.gee.pois[param]
})
# Checking if the true values are contained in any of the above intervals
for (param in 1:3) {
true_beta_param <- true_beta[param] # the current true beta
# Checking model (a)
contained.a <- (true_beta_param >= ci.a[[param]][1]) & (true_beta_param <= ci.a[[param]][2])
Coverage.By.Model$pois.sandwich[[param]] = Coverage.By.Model$pois.sandwich[[param]] + contained.a
# Checking model (b)
contained.b <- (true_beta_param >= ci.b[[param]][1]) & (true_beta_param <= ci.b[[param]][2])
Coverage.By.Model$pois.quasi[[param]] = Coverage.By.Model$pois.quasi[[param]] + contained.b
# Checking model (c)
contained.c <- (true_beta_param >= ci.c[[param]][1]) & (true_beta_param <= ci.c[[param]][2])
Coverage.By.Model$pois.glm[[param]] = Coverage.By.Model$pois.glm[[param]] + contained.c
# Checking model (e)
contained.e <- (true_beta_param >= ci.e[[param]][1]) & (true_beta_param <= ci.e[[param]][2])
Coverage.By.Model$nb.glm[[param]] = Coverage.By.Model$nb.glm[[param]] + contained.e
# Checking model (f)
contained.f <- (true_beta_param >= ci.f[[param]][1]) & (true_beta_param <= ci.f[[param]][2])
Coverage.By.Model$pois.gee[[param]] = Coverage.By.Model$pois.gee[[param]] + contained.f
}
}
Coverage.Rate.By.Model <- lapply(Coverage.By.Model, function(mod) {
lapply(mod, function(param) param/100)
})
Coverage.Rate.By.Model
sim.results <- matrix(nrow = 5, ncol = 3)
colnames(sim.results) <- c("Intercept", "Beta1", "Beta2")
rownames(sim.results) <- c("Quasi Sandwich", "Poisson Quasi" , "Poisson GLM", "NB GLM", "Poisson GEE")
row <- 1
inds <- c(1, 4, 7, 10, 13)
for (i in inds) {
sim.results[row,] <- unlist(Coverage.Rate.By.Model)[c(i, i+1:2)]
row <- row + 1
}
sim.results
xtable(sim.results)
coef.pois.glm
coef.pois.quais
Var.a
se.pois.quasi
se.a
se.gee.pois
